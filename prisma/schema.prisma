// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define Build Status Enum (optional but good practice)
enum BuildStatus {
  PENDING_ANALYSIS
  GENERATING_SAMPLES
  PENDING_USER_FEEDBACK
  CONFIRMED
  ANALYSIS_FAILED // Added for clarity on LLM step failure
  FAILED
  PROCESSING_FEEDBACK // Added for P1
  READY_FOR_SCRAPING // Added for full scrape engine
  SCRAPING_IN_PROGRESS // Added for full scrape engine
  PARTIAL_SUCCESS // Added for partial success in full scrape
  COMPLETED // Added for successful completion of full scrape
  CANCELLED // Added for user-cancelled scrape
}

model Build {
  id                    String      @id @default(cuid()) // Use CUID for unique IDs
  userId                String?     // Optional: Link to a user later
  targetUrls            String      // Array of target URLs (stored as JSON string)
  userObjective         String      // The user's stated goal

  status                BuildStatus @default(PENDING_ANALYSIS) // Use the enum
  error                 String?     // Simple error message (legacy field, kept for backward compatibility)
  errorDetailsJson      Json?       // Structured error details including type, message, stack, context

  initialPackageJson    Json?       // Store the initial LLM-generated config package as JSON (jsonb in Postgres)
  sampleResultsJson     Json?       // Store sample results as JSON (jsonb in Postgres)
  userFeedbackJson      Json?       // Store user feedback for refinement as JSON (jsonb in Postgres)
  finalPackageJson      Json?       // Store the final config package as JSON (jsonb in Postgres)
  metadata              Json?       // Store additional metadata like scrape progress, timing info, etc.

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  runs                  Run[]       // Relation to Run model
}
// --- Run Status Enum ---
enum RunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

// --- Run Model ---
model Run {
  id          String    @id @default(uuid()) // Use UUID for run IDs
  buildId     String
  build       Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  targetUrls  String    // Array of target URLs (JSON string)
  status      RunStatus @default(PENDING)
  resultJson  Json?
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Optional: Add relations later if needed (e.g., to Runs, User)
